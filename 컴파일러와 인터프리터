컴퓨터는 우리가 열심히 짜놓은 코드원본(원시코드)를 이해하지 못한다. 인간이 작성한 코드를 기계어로 번역해줘야 컴퓨터가 알아 듣는다
이때 필요한 번역을 해주는 과정을 컴파일이라고 부르고 원시코드를 번역해주는 번역기를 컴파일러라고 부른다.
인간이 컴퓨터가 이해할 수 있는 기계어로 코드를 짜기는 매우 어렵기 때문에 인간 중심의 고급언어를 사용하는데 인간이 사용하는 고급언어는 컴퓨터가 이해하지 못하기 때문에 
컴파일러가 필요하다

- 컴파일 언어의 종류 -> C, C++, C#, Java


인터프리터 언어 (Interpreted Language)

컴파일러를 거쳐 기계어로 변환되지 않고 바로 실행되는 프로그래밍 언어를 말한다.
프로그래밍 언어 설계할 때 언어 설계자가 자신이 원하는 부분을 구현하는 데에 도움을 준다. 그래서 언어 설계 기간이 엄청나게 단축된다.

- 인터프리터 언어의 종류 : Python, Ruby, Perl, PHP, JavaScript

컴파일러
[ 장점 ]
1. 매번 번역할 필요가 없다 .
2. 인터프리터에 비해 실행 속도가 빠르다.
3. 전체 실행 시간 면에서 효율적이다.

[ 단점 ]
1 .실행 기계가 달라지면 새로 컴파일 해야한다.
2. 한 줄의 입력 시 프로그램이 때론 몇 백 개의 기계어로 번역되기 때문에 그 프로그램은 큰 기억용량을 요구한다. 
특히 입출력 명령은 입출력 형식을 위한 코드 외에 기계 상태 파악코드로 인해 큰 기억 장치가 요구된다.

2) 인터프리터
[ 장점 ]
1. 컴파일러가 비교적 간단하게 되므로 마이크로컴퓨터의 컴파일러나 회화 형언어의 언어처리계에 잘 이용된다.
2. 프로그램이 될 때까지 원시 언어의 형태를 유지하기 때문에 기억 장소가 따로 필요하지 않다.

[ 단점 ]
1. 원시 프로그램을 직접 실행하기 때문에 이 실행에 필요한 소프트웨어가 항상 기계 안에 상주하면서 원시 프로그램의 명령들을 받아서 치리해야 한다. 
만일 반복을 하게 되면 그때마다 원시 프로그램을 해석하고 처리해야 하기 때문에 많은 시간이 걸리기도 한다.
2. 실행 속도가 늦다
3. 인터프리터의 시행 시간은 컴파일러 방법에 비해 비효율적이다.

컴파일러와 인터프리터의 차이점

1) 컴파일러
1. 한번에 모두 읽고 실행하며, 첫 컴파일 과정이 오래 걸릴 수 있다.
2. 컴파일 이후에는 실행이 빠르고 더 이상 변환하지 않아도 된다.
3. 대표적으로 자바가 있다.

2) 인터프리터
1. 코드를 한 줄 한 줄 읽어가며 명령을 처리한다.
2. 바로바로 수정 할 수 있어 용이하다
3. 한 문장씩 처리하기 때문에 속도는 컴파일러 언어에 비해 느리다.

출처: https://rbqja.tistory.com/14
